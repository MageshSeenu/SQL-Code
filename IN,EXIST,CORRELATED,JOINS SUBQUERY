# SQL-Code
Subqueries

1. Scalar Subquery

A subquery that returns only one value.

Example:

SELECT name, salary
FROM employees
WHERE salary > (SELECT AVG(salary) FROM employees);

2. Correlated Subquery

A subquery that depends on the outer query.

Runs once per row in the outer query.

Example:

sql
CopyEdit
SELECT name, salary
FROM employees e1
WHERE salary > (
    SELECT AVG(salary)
    FROM employees e2
    WHERE e1.department_id = e2.department_id
);

3. IN Subquery

Used to check if a value exists in a list returned by a subquery.

Example:

sql
CopyEdit
SELECT name
FROM employees
WHERE department_id IN (
    SELECT id FROM departments WHERE name = 'HR'
);

Feature
Returns
Performance
Use when

IN SUBQUERY EXAMPLES

Get names of employees who work in departments where salary is more than 4000.

SELECT NAME.DEPARTMENT_ID FROM EMPLOYEES
WHERE DEPARTMENTID IN (SELECT DEPARTMENTID FROM EMPLOYEES WHERE SALARY>4000)


SELECT NAME.DEPARTMENT_ID FROM EMPLOYEES
WHERE EXISTS (SELECT DEPARTMENTID FROM EMPLOYEES WHERE SALARY>4000)

🔁 Summary

Type
Scalar
IN
EXISTS
Correlated
JOIN

🧠 Let’s go one-by-one:



1. ✅ Scalar Subquery

Returns only 1 value

Subquery runs once

Used in SELECT, WHERE, or even FROM

Example:

sql
CopyEdit
SELECT name, salary
FROM employees
WHERE salary = (SELECT MAX(salary) FROM employees);

🔹 Subquery gives: MAX(salary) = 8000
🔹 Main query becomes: WHERE salary = 8000



2. ✅ IN Subquery

Subquery runs once

Returns a list

Main query uses that list

Example:

sql
CopyEdit
SELECT name FROM employees
WHERE department_id IN (SELECT id FROM departments WHERE name = 'IT');

🔹 Subquery → gives department IDs with name 'IT'
🔹 Main query checks each employee’s department_id is in that list



3. ❌ EXISTS (Correlated Subquery)

Subquery runs for each row of outer query

Uses data from outer query

Doesn’t care about what’s returned (even SELECT 1 is fine)

Example:

sql
CopyEdit
SELECT name FROM employees e
WHERE EXISTS (
  SELECT 1 FROM employees sub
  WHERE sub.department_id = e.department_id AND sub.salary > 4000
);

🔹 For each employee, check if someone in their department earns > 4000
🔹 If YES → include them



4. ❌ Correlated Subquery (in WHERE or SELECT)

Like EXISTS, but returns a value for each row

Depends on current row’s data

Example:

sql
CopyEdit
SELECT name, salary,
  (SELECT MAX(salary) FROM employees WHERE department_id = e.department_id) as max_dept_salary
FROM employees e;

🔹 For each employee, get the max salary in their department



5. ✅❌ Subquery in JOIN

Used when you want to join with an aggregated or filtered result

Subquery usually runs first (materialized)

Then joined as a regular table

Example:

sql
CopyEdit
SELECT e.name, m.max_salary
FROM employees e
JOIN (
  SELECT department_id, MAX(salary) AS max_salary
  FROM employees
  GROUP BY department_id
) m ON e.department_id = m.department_id;

1. Scalar Subquery

Question:
Get the names of employees whose salary is equal to the average salary of all employees.

SELECT NAME,SALARY FROM EMPLOYEES WHERE SALARY =(SELECT AVG(SALARY) FROM EMPLOYEES) For 1st problem

2. IN Subquery

Question:
Get the names of employees who work in departments where at least one employee earns more than 4000.
select name,departmentid from employees where exists(select 1 from employees b where salary >4000 and b.departmentid=a.departmentid)

3. EXISTS Subquery

select name,departmentid from employees where exists(select 1 from employees b where salary >4000 and b.departmentid=a.departmentid)

select name,departmentid from employees
where department id in (select departmentid from employee where salary>4000)
 
4. Correlated Subquery

Question:
Get the names and salaries of employees who earn the highest salary in their department.

select name,salary from employees e
join (select
